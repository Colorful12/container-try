name: Build and Push Chaos Docker Images

on:
  push:
    branches:
      - 'nightmare'  # nightmare„Éñ„É©„É≥„ÉÅ„ÅÆ„Åø
  workflow_dispatch:  # ÊâãÂãïÂÆüË°å„ÇÇÂèØËÉΩ
    inputs:
      chaos_branch:
        description: 'Chaos testing branch name'
        required: true
        default: 'nightmare'

jobs:
  build-and-push-chaos:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/nightmare'

    permissions:
      contents: read
      packages: write # ghcr.io „Å´push„Åô„Çã„Åü„ÇÅ„Å´ÂøÖË¶Å
    
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # „Éô„Éº„Çπ„Ç§„É°„Éº„Ç∏„ÅÆ‰∫ãÂâç„Éó„É´Ôºà„Ç≠„É£„ÉÉ„Ç∑„É•ÂäπÁéáÂåñÔºâ
      - name: Pull base images
        run: |
          docker pull python:3.13.4-slim
          docker pull node:22.15.1
          echo "Base images pulled successfully"

      # Docker Buildx „Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆË®≠ÂÆö
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: .buildx-cache
          key: ${{ runner.os }}-buildx-chaos-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-chaos-

      # ‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É•Ôºà„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâÔºâ
      - name: Cache backend dependencies
        uses: actions/cache@v3
        with:
          path: backend/.venv
          key: ${{ runner.os }}-backend-deps-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-backend-deps-

      # ‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É•Ôºà„Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÔºâ
      - name: Cache frontend dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-deps-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-deps-

      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # npm „Ç≠„É£„ÉÉ„Ç∑„É•„Çí‰∫ãÂâç„Å´‰ΩúÊàê
      - name: Setup npm cache
        working-directory: frontend
        run: |
          npm ci --only=production
          echo "npm cache created successfully"

      - name: Generate chaos version tag
        id: version
        run: |
          # Á†¥Â£ä„ÉÜ„Çπ„ÉàÁî®„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„Çø„Ç∞
          VERSION="chaos-v1.0.${GITHUB_RUN_NUMBER}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated chaos version: ${VERSION}"

      # Á†¥Â£ä„ÉÜ„Çπ„ÉàÁî®„Ç§„É°„Éº„Ç∏„ÅÆ„Éì„É´„Éâ„Å®„Éó„ÉÉ„Ç∑„É•
      - name: Build and push chaos images
        env: 
          REPO_OWNER: ${{ github.repository_owner }}
          DOCKER_DEFAULT_PLATFORM: linux/arm64
          VERSION: ${{ steps.version.outputs.version }}
          BUILDKIT_INLINE_CACHE: 1
        run: |
          echo "üî• Building chaos testing images..."
          
          # Á†¥Â£ä„ÉÜ„Çπ„ÉàÁî®„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Ç§„É°„Éº„Ç∏
          docker buildx build \
            --cache-from type=local,src=.buildx-cache \
            --cache-to type=local,dest=.buildx-cache,mode=max \
            --platform linux/arm64 \
            --push \
            -t ghcr.io/colorful12/container-try-backend:${VERSION} \
            -t ghcr.io/colorful12/container-try-backend:chaos-latest \
            ./backend
          
          # Á†¥Â£ä„ÉÜ„Çπ„ÉàÁî®„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Ç§„É°„Éº„Ç∏
          docker buildx build \
            --cache-from type=local,src=.buildx-cache \
            --cache-to type=local,dest=.buildx-cache,mode=max \
            --platform linux/arm64 \
            --push \
            -t ghcr.io/colorful12/container-try-frontend:${VERSION} \
            -t ghcr.io/colorful12/container-try-frontend:chaos-latest \
            ./frontend
          
          echo "‚úÖ Chaos images built and pushed successfully!"
          echo "Pushed images with tags: ${VERSION} and chaos-latest"
          
      - name: Display chaos environment info
        run: |
          echo "üî• NIGHTMARE TESTING ENVIRONMENT üî•"
          echo "Branch: ${{ github.ref_name }}"
          echo "Version: ${{ steps.version.outputs.version }}"
          echo "Images pushed to GitHub Container Registry"
          echo "ArgoCD will automatically deploy chaos-latest tags" 
