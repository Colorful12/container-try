name: Build and Push Docker image

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write # ghcr.io にpushするために必要
    
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ベースイメージの事前プル（キャッシュ効率化）
      - name: Pull base images
        run: |
          docker pull python:3.13.4-slim
          docker pull node:22.15.1
          echo "Base images pulled successfully"

      # Docker Buildx キャッシュの設定（修正版）
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: .buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 依存関係のキャッシュ（バックエンド）
      - name: Cache backend dependencies
        uses: actions/cache@v3
        with:
          path: backend/.venv
          key: ${{ runner.os }}-backend-deps-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-backend-deps-

      # 依存関係のキャッシュ（フロントエンド）
      - name: Cache frontend dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-deps-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-deps-

      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # npm キャッシュを事前に作成
      - name: Setup npm cache
        working-directory: frontend
        run: |
          npm ci --only=production
          echo "npm cache created successfully"

      - name: Generate version tag
        id: version
        run: |
          # セマンティックバージョニングに準拠
          VERSION="v1.0.${GITHUB_RUN_NUMBER}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"

      # 最適化されたビルド（キャッシュ活用 + --push追加）
      - name: Build and push with Compose (Optimized)
        env: 
          REPO_OWNER: ${{ github.repository_owner }}
          DOCKER_DEFAULT_PLATFORM: linux/arm64
          VERSION: ${{ steps.version.outputs.version }}
          BUILDKIT_INLINE_CACHE: 1
        run: |
          # Buildx キャッシュを使用したビルド（修正版）
          docker buildx build \
            --cache-from type=local,src=.buildx-cache \
            --cache-to type=local,dest=.buildx-cache,mode=max \
            --platform linux/arm64 \
            --push \
            -t ghcr.io/colorful12/container-try-backend:latest \
            -t ghcr.io/colorful12/container-try-backend:${VERSION} \
            ./backend
          
          docker buildx build \
            --cache-from type=local,src=.buildx-cache \
            --cache-to type=local,dest=.buildx-cache,mode=max \
            --platform linux/arm64 \
            --push \
            -t ghcr.io/colorful12/container-try-frontend:latest \
            -t ghcr.io/colorful12/container-try-frontend:${VERSION} \
            ./frontend
          
          echo "Build and push completed with cache optimization!"
          echo "Pushed images with tags: latest and ${VERSION}"
              
      - name: Inspect buildx cache directory
        run: |
          echo "✅ Cached layers:"
          find .buildx-cache -type f | head -n 20
          
      - name: Inspect npm cache directory!
        run: |
          echo "✅ NPM cache:"
          find ~/.npm -type f | head -n 20
